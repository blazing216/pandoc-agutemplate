#!/usr/bin/env python
#-*-coding:utf-8-*-

import os
import sys
import shutil
from subprocess import call
import pkg_resources
import argparse

def pkg_file(fn):
    return pkg_resources.resource_filename('pandoc_agutemplate', fn)

usage = '''md2agu - Convert Markdown files to AGU journal's format'''
parser = argparse.ArgumentParser(description=usage)
parser.add_argument('mdfile',
        help='Markdown file')
parser.add_argument('-f', '--force', action='store_true',
        default=False, dest='force',
        help='Overwrite output files if they alreday exist')
parser.add_argument('--bibliography', dest='bib',
        help='Bibliography in bibtext format')
#parser.add_argument('--csl', dest='csl',
#        help='Citation format file')
args = parser.parse_args()

# check if the input Markdown file is in current folder
mdfile = args.mdfile
print('Converting %s to AGU format' % mdfile)

fn = os.path.basename(mdfile)
if os.path.abspath(fn) != os.path.abspath(mdfile):
    print((' Error: The Markdown file should be in '
        'the current directory %s') % os.getcwd())
    sys.exit()

fn_name, fn_ext = os.path.splitext(fn)

pdf_fn = fn_name + '.pdf'
docx_fn = fn_name + '.docx'

citation_flags = []
citation_flags.append('--csl=agu.csl')
if args.bib is not None:
    citation_flags.append('--bibliography=%s' % args.bib)
    citation_flags.append('--citeproc')
citation_flags = ' '.join(citation_flags)

if not args.force:
    i = 1
    while os.path.isfile(pdf_fn):
        new_pdf_fn = fn_name + '%d' % i + '.pdf'
        print((' Warning: %s already exists. Write to %s.'
            ' Use --force or -f to overwrite') % (pdf_fn, new_pdf_fn))
        pdf_fn = new_pdf_fn
        i += 1

    i = 1
    while os.path.isfile(docx_fn):
        new_docx_fn = fn_name + '%d' %i + '.docx'
        print((' Warning: %s already exists. Write to %s.'
            ' Use --force or -f to overwrite') % (docx_fn, new_docx_fn))
        docx_fn = new_docx_fn
        i += 1

shutil.copy(pkg_file('data/agujournal2019.cls'), os.getcwd())
shutil.copy(pkg_file('data/trackchanges.sty'), os.getcwd())
shutil.copy(pkg_file('data/agu-docx.tex'), os.getcwd())
shutil.copy(pkg_file('data/agutemplate.tex'), os.getcwd())
shutil.copy(pkg_file('data/agu-reference.docx'), os.getcwd())
shutil.copy(pkg_file('data/agu.csl'), os.getcwd())

# Convert to pdf
print(("pandoc -s %s --template=%s "
    "--pdf-engine=xelatex %s -o %s") % (mdfile, 'agutemplate.tex', citation_flags, pdf_fn),
    )
call(("pandoc -s %s --template=%s "
    " %s -o %s") % (mdfile, 'agutemplate.tex', citation_flags, pdf_fn),
    shell=True)

if os.path.isfile(pdf_fn):
    print(pdf_fn)

# Convert to docx
print(("pandoc %s --template=%s %s "
    "-o test_docx.tex") % (mdfile, 'agu-docx.tex', citation_flags),
    )
call(("pandoc %s --template=%s %s "
    "-o test_docx.tex") % (mdfile, 'agu-docx.tex', citation_flags),
    shell=True)

print(("pandoc test_docx.tex "
    "--reference-doc=%s %s "
    "-o %s") % ('agu-reference.docx', citation_flags, docx_fn))
call(("pandoc test_docx.tex "
    "--reference-doc=%s %s "
    "-o %s") % ('agu-reference.docx', citation_flags, docx_fn), shell=True)

if os.path.isfile(docx_fn):
    print(docx_fn)

call("rm test_docx.tex", shell=True)
